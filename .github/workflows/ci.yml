name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: erlef/setup-elixir@885971a72ed1f9240973bd92ab57af8c1aa68f24
        with:
          otp-version: "24.0"
          elixir-version: "1.12.1"
      - uses: actions/cache@v2
        env:
          cache-name: cache-elixir-deps
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: deps
        run: mix  deps.get
      - name: Lint Code
        run: mix credo --strict

  check_format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: erlef/setup-elixir@885971a72ed1f9240973bd92ab57af8c1aa68f24
        with:
          otp-version: "24.0"
          elixir-version: "1.12.1"
      - uses: actions/cache@v2
        env:
          cache-name: cache-elixir-deps
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: deps
        run: mix  deps.get
      - name: FORMAT
        run: mix format --check-formatted

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: erlef/setup-elixir@885971a72ed1f9240973bd92ab57af8c1aa68f24
        with:
          otp-version: "24.0"
          elixir-version: "1.12.1"
      - uses: actions/cache@v2
        env:
          cache-name: cache-elixir-deps
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: deps
        run: mix  deps.get
      - name: Security
        run: mix sobelow --config

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: erlef/setup-elixir@885971a72ed1f9240973bd92ab57af8c1aa68f24
        with:
          otp-version: "24.0"
          elixir-version: "1.12.1"
      - uses: actions/cache@v2
        env:
          cache-name: cache-elixir-deps
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: ==> ðŸ”Ž Integrating test
        run: mix coveralls.json
      - uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
    services:
      pg:
        image: postgres:alpine
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

  deploy:
    name: Deploy Gigalixir
    needs: [lint, check_format, security, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: "290.0.1"
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.PROJECT_ID }}
      - run: |-
          gcloud --quiet auth configure-docker
      - run: |-
          gcloud container clusters get-credentials "$GKE_CLUSTER" --region "$GKE_REGION" --project "$PROJECT_ID"
      - name: Build docker IMAGE
        run: |-
          docker pull "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" > /dev/null || docker build -t "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" .
      - name: Push docker image
        run: |-
          docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"
      - name: Deploy Helm Chart
        working-directory: "./charts/${{ env.IMAGE }}"
        run: |-
          pwd
          helm dependency update
          helm \
          -n "$NAMESPACE" \
          upgrade "$HELM_PROJECT" \
          ./ \
          --wait \
          --reuse-values \
          --set image.repository="gcr.io/$PROJECT_ID/$IMAGE",image.tag="$GITHUB_SHA"
